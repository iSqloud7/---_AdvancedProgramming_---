Дадени се следниве пет класи:
1. Bank
2. Account
3. NonInterestCheckingAccount
4. InterestCheckingAccount
5. PlatinumCheckingAccount
како и интефејс наречен InterestBearingAccount кои се однесуваат на следниот начин:

=>1
• Account е апстрактна класа.
Во секој сметка се чуваат:
-името на сопственикот на сметката,
-бројот на сметката (секвенцијален број доделен автоматски),
-моменталната состојба.
Во класата се имплементираат:
-конструктор за иницијализација на податочните членови,
-методи за пристап до моменталната состојба, како и за
-додавање и
-одземање од моменталната состојба.

=>2
• InterestBearingAccount интерфејсот декларира единствен метод
-addInterest (без параметри и не враќа ништо - void) кој ја зголемува состојбата со соодветната камата за овој вид на сметка.

=>3
• InterestCheckingAccount е сметка Account која е исто така InterestBearingAccount.
Повикување addInterest ја зголемува состојбата за 3%.

=>4
• PlatinumCheckingAccount е InterestCheckingAccount.
Повикување addInterest ја зголемува состојбата двојно од каматата за InterestCheckingAccount (колку и да е таа).

=>5
• NonInterestCheckingAccount е сметка Account но не е InterestBearingAccount.
Нема дополнителни функционалности надвор од основните од класата Account.

=>6
• Во Bank чува листа од сите видови сметки, вклучувајќи сметки:
-за штедење и
-за трошење,
некои од нив подложни на камата, а некои не.
Во Bank постои метод:
-totalAssets кој ја враќа сумата на состојбата на сите сметки.
Исто така содржи метод:
-addInterest кој го повикува методот addInterest на сите сметки кои се подложни на камата.

За оваа задача, потребно е да се имплментира функционалност дадена во претходниот текст:
1. Пет од шест класи од споменатите формираат хиерархија. За овие класи да се нацрта оваа хиерархија.
2. Да се имплементира Account.
3. Да се имплементира NonInterestCheckingAccount.
4. Да се напише InterestBearingAccount интерфејсот.
5. Да се имплементира Bank.
6. Да се имплементира InterestCheckingAccount.
7. Да се имплементира PlatinumCheckingAccount.